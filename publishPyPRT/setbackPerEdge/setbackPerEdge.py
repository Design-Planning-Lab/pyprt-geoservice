import argparse
import os
import json
from typing import List, Tuple
from .dataTypes import Feature, Polygon, LineString
from .debug import debugPrint

from . import prt
from . import util_geometry as geom
from pathlib import Path

# entry point
def main(payload: dict):

    geometry = payload["geometry"]
    rpkName = payload["rpkName"]

    site: Feature[Polygon] = Feature.makePolygon(geometry["site"])
    roads: List[Feature[LineString]] = [
        Feature.makeLineString(f) for f in geometry["roads"]["features"]
    ]

    edgeAttributesList: List[List[Feature[LineString]]] = geom.computeEdgeAttributes(
        site, roads, ["road_cat"]
    )
    setbackDistanceList: List[float] = geom.getSetbackDistsPerEdge(
        edgeAttributesList, geom.DISTANCE_MAP
    )
    return runPRT(site.geometry.boundary.coords[:-1], setbackDistanceList, rpkName)


def runPRT(polygonCoords, setbackDistList, rpkName):
    # take in a series of coords defining a site
    currDir = os.path.dirname(Path(__file__))
    rpkDir = os.path.join(currDir, "rpk")
    rpkPath = os.path.join(rpkDir, f"{rpkName}.rpk")
    debugPrint(os.path.exists(rpkPath))


    # add 0.0 y coord to provided coordstring
    # then concat all into one long iterable

    coordArr = sum(((float(i), 0.0, float(j)) for i, j in polygonCoords), tuple())

    shp = prt.prtShapeFromArr(coordArr)

    debugPrint(shp.get_face_counts_count())
    debugPrint(shp.get_index_count())
    debugPrint(shp.get_vertex_count())


    m2 = prt.makeModelGenerator([shp])  # model containing one site
    attrs = [
        {"/edgeattr/setbacks": setbackDistList}
    ]  # reverts to default when using int
    encoder_args = {"emitGeometry": True, "emitReport": True}
    result: List[prt.GeneratedModel] = m2.generate_model(
        attrs, rpkPath, prt.PYTHON_ENCODER, encoder_args
    )
    debugPrint("result")

    debugPrint(m2)
    debugPrint(dir(m2))

    import pyprt
    debugPrint(pyprt.get_rpk_attributes_info(rpkPath))
    # debugPrint(m2.get_attributes())
    # debugPrint(m2.get_cga_errors())
    # debugPrint(m2.get_report()l)



    debugPrint(result)
    debugPrint(dir(result))
    debugPrint(len(result))

    return PRTparseToPts(result)


def PRTparseToPts(PRTobject: List[prt.GeneratedModel]) -> List[Tuple[float, float]]:
    pts = []
    # convert output coords into a list of points to be parsed by shapely.Polygon()
    for m in PRTobject:  # generated should only have one member since we gave one shape
        # 3 faces are generated by the rule
        # original, counterclockwise, clockwise
        # pick the clockwise one
        face = modelToVertices(m)[-1]

        pts = [(x, z) for x, y, z in face]  # drop unused y value
        pts += [pts[0]]  # append last coord to close loop
    return pts


def modelToVertices(
    model: prt.GeneratedModel,
) -> List[List[Tuple[float, float, float]]]:
    """
    return the model's faces as a list of coordinates
    """
    vertices = prt.vertices_vector_to_matrix(model.get_vertices())
    f = prt.faces_indices_vectors_to_matrix(model.get_indices(), model.get_faces())


    debugPrint("model to vertices")
    debugPrint(vertices)
    debugPrint(f)

    # convert indices to coords
    for i in range(len(f)):
        f[i] = [vertices[j] for j in f[i]]
    return f


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-path", "--path", type=str, required=True)
    args = parser.parse_args()

    assert os.path.exists(args.path), "invalid path provided"

    prt.initialize_prt()
    assert prt.is_prt_initialized()
    with open(args.path, "r") as fp:
        data = {"geometry": json.load(fp), "rpkName": "SetbackPerEdge"}
        res = main(data)
    for i in res:
        print(i)
    prt.shutdown_prt()
